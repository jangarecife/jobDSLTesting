group 'com.praqma'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'

def jobDslVersion = "1.64"
def jenkinsVersion = "2.60.2"

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    //flatDir {
    //    dirs 'libs'
    //}
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
    jcenter()
}

configurations {
    testPlugins {}
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

    // Jenkins test harness dependencies
    // https://mvnrepository.com/artifact/org.netbeans.modules/org-netbeans-insane
//    testCompile group: 'org.netbeans.modules', name: 'org-netbeans-insane', version: 'RELEASE72'
    testCompile 'org.jenkins-ci.main:jenkins-test-harness:2.33-SNAPSHOT'
//    testCompile('org.jenkins-ci.main:jenkins-test-harness:2.32') {
//        exclude group: 'org.netbeans.modules', module: 'org-netbeans-insane'
//    }

    testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
 //   testCompile "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}:war-for-test@jar"

    // Job DSL plugin including plugin dependencies
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
    testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
    testCompile 'org.jenkins-ci.plugins:structs:1.6@jar'
}

task resolveTestPlugins(type: Copy) {
    from configurations.testPlugins
    into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
    include '*.hpi'
    include '*.jpi'
    def mapping = [:]

    doFirst {
        configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
            mapping[it.file.name] = "${it.name}.${it.extension}"
        }
    }

    rename { mapping[it] }

    doLast {
        List<String> baseNames = source*.name.collect { mapping[it] }.collect { it[0..it.lastIndexOf('.') - 1] }
        new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
    }
}

test {
    dependsOn tasks.resolveTestPlugins
    inputs.files sourceSets.jobs.groovy.srcDirs
    // set build directory for Jenkins test harness, JENKINS-26331
    systemProperty 'buildDirectory', project.buildDir.absolutePath
}
